#! \addtogroup CPPQEDConfig
#! @{

#! \file
#! \brief Export targets and variables for the core component.

@PACKAGE_INIT@

#! \brief
set(CPPQED_VERSION_MAJOR "@CPPQED_VERSION_MAJOR@")
set(CPPQED_VERSION_MINOR "@CPPQED_VERSION_MINOR@")
set(CPPQED_VERSION_PATCH "@CPPQED_VERSION_PATCH@")
set(CPPQED_VERSION "@CPPQED_VERSION@")
set(CPPQED_ID "@CPPQED_ID@")
#! \brief
set(CPPQED_ABI_MAJOR "@CPPQED_ABI_MAJOR@")
#! \brief
set(CPPQED_ABI_MINOR "@CPPQED_ABI_MINOR@")
#! \brief
set(CPPQED_ABI_MICRO "@CPPQED_ABI_MICRO@")


#! Core git commit sha1 hash value
set(CPPQED_CORE_GIT "@CONF_GIT_SHA1@")

# set_and_check does not work with lists

#! A list of all C++QED core subdirectories which contain header files
set(CPPQED_INCLUDE_DIRS "@PACKAGE_CONF_INCLUDE_DIRS@")

#! \brief A list of all directories with header files C++QED depends on (even at compile time of other
#!   clients because of templates)
set(CPPQED_THIRDPARTY_INCLUDE_DIRS "@PACKAGE_CPPQED_THIRDPARTY_INCLUDE_DIRS@")

#! Compiler definitions which should be set when using this core library (automatically set in CPPQED_SETUP())
set(CPPQED_DEFINITIONS "@CPPQED_DEFINITIONS@")

# Hint Python directory
set(PYTHON_LIBRARY "@PYTHON_LIBRARIES@")
set(PYTHON_INCLUDE_DIR "@PYTHON_INCLUDE_DIRS@")

#! Directory for CMake module files and auxiliary files
set_and_check(CPPQED_CMAKE_DIR "@PACKAGE_CONF_CMAKE_DIR@")
#! Path of the CPPQEDUse.cmake file, defining auxiliary functions and macros.
set_and_check(CPPQED_USE "@PACKAGE_CONF_CMAKE_DIR@/CPPQEDUse.cmake")

# Our library dependencies (contains definitions for IMPORTED targets)
if(NOT TARGET @CPPQEDLIB@)
  include("@PACKAGE_CONF_CMAKE_DIR@/CPPQEDcoreTargets.cmake")
endif()

#! \brief This is the target name which must be used to link to the C++QED core library.
#!
#! This is an IMPORTED target created by the automatically generated file CPPQEDcoreTargets.cmake.
#!
#! When the target is imported, the two properties `MAP_IMPORTED_CONFIG_DEBUG` and
#! `MAP_IMPORTED_CONFIG_RELEASE` are set to "Debug" and "Release", respectively.
#! This has the effect that the library can only be used with the exact corresponding
#! build configurations. If for example a project with debug configuration tries to link against
#! the core library in release configuration, this will be an error at link time.
set(CPPQED_LIBRARIES "@CPPQEDLIB@" @PACKAGE_CONF_SPECIAL_LIBRARIES@)
set_target_properties(@CPPQEDLIB@ PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "Debug" MAP_IMPORTED_CONFIG_RELEASE "Release")

#! @}
